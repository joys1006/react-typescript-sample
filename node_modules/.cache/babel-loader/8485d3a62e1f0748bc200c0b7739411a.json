{"ast":null,"code":"import { Record } from 'immutable';\nimport { createAction, handleActions } from 'redux-actions';\nconst INCREMENT = 'counter/INCREMENT';\nconst DECREMENT = 'counter/DECREMENT';\nconst SET_COLOR = 'counter/SET_COLOR';\nexport const increment = createAction(INCREMENT);\nexport const decrement = createAction(DECREMENT);\nexport const setColor = createAction(SET_COLOR); // 초기 상태를 정의합니다\n\nconst InitialState = Record({\n  color: [0],\n  number: 0\n});\n\nclass CounterState extends InitialState {}\n\nconst initialState = new CounterState();\nconst counter = handleActions({\n  [INCREMENT]: state => {\n    return state.set('number', state.get('number') + 1);\n  },\n  [DECREMENT]: state => {\n    return state.set('number', state.get('number') - 1);\n  },\n  [SET_COLOR]: (state, action) => {\n    return state.set('color', action.payload);\n  }\n}, initialState);\nexport default counter;","map":{"version":3,"sources":["/Users/eomhocheol/Desktop/source/react-typescript-sample/react-typescript-sample/src/store/modules/counter/counter.module.ts"],"names":["Record","createAction","handleActions","INCREMENT","DECREMENT","SET_COLOR","increment","decrement","setColor","InitialState","color","number","CounterState","initialState","counter","state","set","get","action","payload"],"mappings":"AAAA,SAASA,MAAT,QAAuB,WAAvB;AACA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AAEA,MAAMC,SAAS,GAAG,mBAAlB;AACA,MAAMC,SAAS,GAAG,mBAAlB;AACA,MAAMC,SAAS,GAAG,mBAAlB;AAIA,OAAO,MAAMC,SAAS,GAAGL,YAAY,CAACE,SAAD,CAA9B;AACP,OAAO,MAAMI,SAAS,GAAGN,YAAY,CAACG,SAAD,CAA9B;AACP,OAAO,MAAMI,QAAQ,GAAGP,YAAY,CAAeI,SAAf,CAA7B,C,CAEP;;AACA,MAAMI,YAAY,GAAGT,MAAM,CAAC;AACxBU,EAAAA,KAAK,EAAE,CAAC,CAAD,CADiB;AAExBC,EAAAA,MAAM,EAAE;AAFgB,CAAD,CAA3B;;AAUA,MAAMC,YAAN,SAA2BH,YAA3B,CAAoE;;AAGpE,MAAMI,YAAY,GAAG,IAAID,YAAJ,EAArB;AAEA,MAAME,OAAO,GAAGZ,aAAa,CAAoB;AAC7C,GAACC,SAAD,GAAcY,KAAD,IAAyB;AAClC,WAAOA,KAAK,CAACC,GAAN,CAAU,QAAV,EAAoBD,KAAK,CAACE,GAAN,CAAU,QAAV,IAAsB,CAA1C,CAAP;AACH,GAH4C;AAI7C,GAACb,SAAD,GAAcW,KAAD,IAAyB;AAClC,WAAOA,KAAK,CAACC,GAAN,CAAU,QAAV,EAAoBD,KAAK,CAACE,GAAN,CAAU,QAAV,IAAsB,CAA1C,CAAP;AACH,GAN4C;AAO7C,GAACZ,SAAD,GAAa,CAACU,KAAD,EAAQG,MAAR,KAAiC;AAC1C,WAAOH,KAAK,CAACC,GAAN,CAAU,OAAV,EAAmBE,MAAM,CAACC,OAA1B,CAAP;AACH;AAT4C,CAApB,EAU1BN,YAV0B,CAA7B;AAaA,eAAeC,OAAf","sourcesContent":["import { Record } from 'immutable';\nimport { createAction, handleActions } from 'redux-actions';\n\nconst INCREMENT = 'counter/INCREMENT';\nconst DECREMENT = 'counter/DECREMENT';\nconst SET_COLOR = 'counter/SET_COLOR';\n\ntype ColorPayload = Array<number>;\n\nexport const increment = createAction(INCREMENT);\nexport const decrement = createAction(DECREMENT);\nexport const setColor = createAction<ColorPayload>(SET_COLOR);\n\n// 초기 상태를 정의합니다\nconst InitialState = Record({\n    color: [0],\n    number: 0\n});\n\nexport interface CounterStateType {\n    color: Array<number>;\n    number: number;\n}\n\nclass CounterState extends InitialState implements CounterStateType {\n}\n\nconst initialState = new CounterState();\n\nconst counter = handleActions<CounterState, any>({\n    [INCREMENT]: (state): CounterState => {\n        return state.set('number', state.get('number') + 1);\n    },\n    [DECREMENT]: (state): CounterState => {\n        return state.set('number', state.get('number') - 1);\n    },\n    [SET_COLOR]: (state, action): CounterState => {\n        return state.set('color', action.payload);\n    },\n}, initialState);\n\n\nexport default counter;\n"]},"metadata":{},"sourceType":"module"}