{"ast":null,"code":"var _jsxFileName = \"/Users/eomhocheol/Desktop/source/react-typescript-sample/react-typescript-sample/src/containers/TableList/TableListContainer.tsx\";\nimport React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux'; // UI components\n\nimport TableList from '@components/TableList/TableList'; // Actions\n\nimport * as tableListActions from '@src/store/modules/tableList/tableList.module';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n;\n\nclass TableListContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleTableChange = (pagination, filters, sorter) => {\n      const pager = { ...this.state.pagination\n      };\n      const payload = {\n        current: pagination.current,\n        size: pagination.pageSize,\n        ...filters\n      };\n      pager.current = pagination.current;\n      this.setState({\n        pagination: pager\n      });\n      this.getTableData(payload);\n    };\n\n    this.getTableData = async (params = {}) => {\n      const {\n        TableListActions,\n        loading\n      } = this.props;\n      const samplePayload = {\n        current: this.state.pagination.current,\n        size: this.state.pagination.pageSize,\n        ...params\n      };\n\n      try {\n        await TableListActions.getTableDataRequest(samplePayload);\n        await TableListActions.getTableDataRequest(samplePayload);\n\n        if (!loading) {\n          this.getTableDataCallBack();\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    this.getTableDataCallBack = () => {\n      const pagination = { ...this.state.pagination\n      };\n      pagination.total = 200;\n      this.setState({\n        pagination\n      });\n    };\n\n    this.state = {\n      loading: false,\n      pagination: {\n        current: 1,\n        pageSize: 10\n      },\n      columns: [{\n        title: 'no',\n        dataIndex: 'no',\n        width: '20%'\n      }, {\n        title: 'name',\n        dataIndex: 'name'\n      }, {\n        title: 'createdAt',\n        dataIndex: 'createdAt',\n        width: '20%'\n      }]\n    };\n  }\n\n  componentDidMount() {\n    this.getTableData();\n  }\n\n  render() {\n    const {\n      columns,\n      pagination\n    } = this.state;\n    const {\n      data,\n      loading\n    } = this.props;\n    const {\n      handleTableChange\n    } = this;\n    return /*#__PURE__*/_jsxDEV(TableList, {\n      columns: columns,\n      changedDataEventHandler: handleTableChange,\n      loading: loading,\n      pagination: pagination,\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    data: state.tableList.data,\n    loading: state.tableList.loading\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    TableListActions: bindActionCreators(tableListActions, dispatch)\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TableListContainer);","map":{"version":3,"sources":["/Users/eomhocheol/Desktop/source/react-typescript-sample/react-typescript-sample/src/containers/TableList/TableListContainer.tsx"],"names":["React","Component","bindActionCreators","connect","TableList","tableListActions","TableListContainer","constructor","props","handleTableChange","pagination","filters","sorter","pager","state","payload","current","size","pageSize","setState","getTableData","params","TableListActions","loading","samplePayload","getTableDataRequest","getTableDataCallBack","e","console","log","total","columns","title","dataIndex","width","componentDidMount","render","data","mapStateToProps","tableList","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport { bindActionCreators} from 'redux';\nimport { connect } from 'react-redux';\n\n// UI components\nimport TableList from '@components/TableList/TableList';\n\n// Actions\nimport * as tableListActions from '@src/store/modules/tableList/tableList.module';\nimport {StoreState} from '@src/store/modules';\nimport {PaginationProps} from 'antd';\nimport {ColumnType} from 'antd/lib/table/interface';\nimport {FilterValue, SorterResult} from 'antd/es/table/interface';\nimport TableListResponse from '@src/types/response/TableListResponse';\n\ninterface Props {\n    loading: boolean;\n    data: Array<TableListResponse>;\n    TableListActions: typeof tableListActions;\n};\n\ninterface States {\n    columns: Array<ColumnType<any>>;\n    pagination: PaginationProps;\n    loading: boolean;\n}\n\nclass TableListContainer extends Component<Props, States> {\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            loading: false,\n            pagination: {\n                current: 1,\n                pageSize: 10\n            },\n            columns: [\n                {\n                    title: 'no',\n                    dataIndex: 'no',\n                    width: '20%',\n                }, {\n                    title: 'name',\n                    dataIndex: 'name'\n                },\n                {\n                    title: 'createdAt',\n                    dataIndex: 'createdAt',\n                    width: '20%',\n                },\n            ]\n        };\n    }\n\n    handleTableChange = (pagination: PaginationProps, filters: Record<string, FilterValue | null>, sorter: SorterResult<any>) => {\n        const pager = { ...this.state.pagination };\n        const payload = {\n            current: pagination.current,\n            size: pagination.pageSize,\n            ...filters,\n        };\n        pager.current = pagination.current;\n\n        this.setState({\n            pagination: pager,\n        });\n\n        this.getTableData(payload);\n\n    }\n\n    getTableData = async (params = {}) => {\n\n        const { TableListActions, loading } = this.props;\n        const samplePayload = {\n            current: this.state.pagination.current,\n            size: this.state.pagination.pageSize,\n            ...params,\n        };\n\n        try {\n            await TableListActions.getTableDataRequest(samplePayload)\n            await TableListActions.getTableDataRequest(samplePayload)\n            if (!loading) {\n                this.getTableDataCallBack();\n            }\n        } catch(e) {\n            console.log(e);\n        }\n    }\n\n    getTableDataCallBack = () => {\n        const pagination = { ...this.state.pagination };\n        pagination.total = 200;\n        this.setState({\n            pagination,\n        });\n    }\n\n    componentDidMount () {\n        this.getTableData();\n    }\n\n    render () {\n        const { columns, pagination } = this.state;\n        const { data, loading } = this.props;\n        const { handleTableChange } = this;\n\n        return (\n            <TableList columns={columns}\n                       changedDataEventHandler={handleTableChange}\n                       loading={loading}\n                       pagination={pagination}\n                       data={data} />\n        );\n    }\n}\n\nconst mapStateToProps = (state: StoreState) => {\n    return {\n        data: state.tableList.data,\n        loading: state.tableList.loading\n    };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        TableListActions: bindActionCreators(tableListActions, dispatch)\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(TableListContainer);\n"]},"metadata":{},"sourceType":"module"}