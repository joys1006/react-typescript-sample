{"ast":null,"code":"import { Record } from 'immutable';\nimport { put, call, all, takeEvery } from 'redux-saga/effects';\nimport { createAction, handleActions } from 'redux-actions';\n// API Services\nimport SampleService from '@src/services/Apis/sample.service';\nconst GET_TABLE_DATA_REQUEST = 'table/GET_TABLE_DATA_REQUEST';\nconst GET_TABLE_DATA_SUCCESS = 'table/GET_TABLE_DATA_SUCCESS';\nconst GET_TABLE_DATA_FAILURE = 'table/GET_TABLE_DATA_FAILURE';\nexport const getTableDataRequest = createAction(GET_TABLE_DATA_REQUEST);\nexport const getTableDataSuccess = createAction(GET_TABLE_DATA_SUCCESS);\nexport const getTableDataFailure = createAction(GET_TABLE_DATA_FAILURE);\nexport function* getTableData(action) {\n  const response = yield call(SampleService.SampleTableData, action.payload);\n  yield put(getTableDataSuccess(response));\n}\n;\nexport function* watchTableDataActions() {\n  yield all([takeEvery(GET_TABLE_DATA_REQUEST, getTableData)]);\n}\n; // 초기 상태를 정의합니다\n\nconst InitialState = Record({\n  data: [],\n  loading: false\n});\n\nclass TableState extends InitialState {}\n\nconst initialState = new TableState(); // 리듀서\n\nconst tableList = handleActions({\n  [GET_TABLE_DATA_REQUEST]: (state, action) => {\n    console.log('request');\n    return state.set('loading', true);\n  },\n  [GET_TABLE_DATA_SUCCESS]: (state, action) => {\n    console.log('success');\n    return state.set('loading', false).set('data', action.payload);\n  },\n  [GET_TABLE_DATA_FAILURE]: (state, action) => {\n    console.error('통신에러');\n    return state.set('loading', false);\n  }\n}, initialState);\nexport default tableList;","map":{"version":3,"sources":["/Users/eomhocheol/Desktop/source/react-typescript-sample/react-typescript-sample/src/store/modules/tableList/tableList.module.ts"],"names":["Record","put","call","all","takeEvery","createAction","handleActions","SampleService","GET_TABLE_DATA_REQUEST","GET_TABLE_DATA_SUCCESS","GET_TABLE_DATA_FAILURE","getTableDataRequest","getTableDataSuccess","getTableDataFailure","getTableData","action","response","SampleTableData","payload","watchTableDataActions","InitialState","data","loading","TableState","initialState","tableList","state","console","log","set","error"],"mappings":"AAAA,SAASA,MAAT,QAAuB,WAAvB;AACA,SACIC,GADJ,EAEIC,IAFJ,EAGIC,GAHJ,EAIIC,SAJJ,QAKO,oBALP;AAMA,SAAgBC,YAAhB,EAA8BC,aAA9B,QAAkD,eAAlD;AAGA;AACA,OAAOC,aAAP,MAA0B,mCAA1B;AAGA,MAAMC,sBAAsB,GAAG,8BAA/B;AACA,MAAMC,sBAAsB,GAAG,8BAA/B;AACA,MAAMC,sBAAsB,GAAG,8BAA/B;AAEA,OAAO,MAAMC,mBAAmB,GAAGN,YAAY,CAACG,sBAAD,CAAxC;AACP,OAAO,MAAMI,mBAAmB,GAAGP,YAAY,CAACI,sBAAD,CAAxC;AACP,OAAO,MAAMI,mBAAmB,GAAGR,YAAY,CAACK,sBAAD,CAAxC;AAEP,OAAO,UAAUI,YAAV,CAAuBC,MAAvB,EAAyD;AAC5D,QAAMC,QAAkC,GAAG,MAAMd,IAAI,CAACK,aAAa,CAACU,eAAf,EAAgCF,MAAM,CAACG,OAAvC,CAArD;AACA,QAAMjB,GAAG,CAACW,mBAAmB,CAACI,QAAD,CAApB,CAAT;AACH;AAAA;AAED,OAAO,UAAUG,qBAAV,GAAkC;AACrC,QAAMhB,GAAG,CAAC,CACNC,SAAS,CAAcI,sBAAd,EAAsCM,YAAtC,CADH,CAAD,CAAT;AAGH;AAAA,C,CAED;;AACA,MAAMM,YAAY,GAAGpB,MAAM,CAAC;AACxBqB,EAAAA,IAAI,EAAE,EADkB;AAExBC,EAAAA,OAAO,EAAE;AAFe,CAAD,CAA3B;;AAUA,MAAMC,UAAN,SAAyBH,YAAzB,CAAgE;;AAGhE,MAAMI,YAAY,GAAG,IAAID,UAAJ,EAArB,C,CAEA;;AACA,MAAME,SAAS,GAAGnB,aAAa,CAAkB;AAC7C,GAACE,sBAAD,GAA0B,CAACkB,KAAD,EAAQX,MAAR,KAAmB;AACzCY,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA,WAAOF,KAAK,CAACG,GAAN,CAAU,SAAV,EAAqB,IAArB,CAAP;AACH,GAJ4C;AAK7C,GAACpB,sBAAD,GAA0B,CAACiB,KAAD,EAAQX,MAAR,KAAmB;AACzCY,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA,WAAOF,KAAK,CACPG,GADE,CACE,SADF,EACa,KADb,EAEFA,GAFE,CAEE,MAFF,EAEUd,MAAM,CAACG,OAFjB,CAAP;AAIH,GAX4C;AAY7C,GAACR,sBAAD,GAA0B,CAACgB,KAAD,EAAQX,MAAR,KAAmB;AACzCY,IAAAA,OAAO,CAACG,KAAR,CAAc,MAAd;AACA,WAAOJ,KAAK,CAACG,GAAN,CAAU,SAAV,EAAqB,KAArB,CAAP;AACH;AAf4C,CAAlB,EAgB5BL,YAhB4B,CAA/B;AAkBA,eAAeC,SAAf","sourcesContent":["import { Record } from 'immutable';\nimport {\n    put,\n    call ,\n    all,\n    takeEvery,\n} from 'redux-saga/effects';\nimport {Action, createAction, handleActions} from 'redux-actions';\nimport TableListPayload from '@src/types/payload/TableListPayload';\n\n// API Services\nimport SampleService from '@src/services/Apis/sample.service';\nimport TableListResponse from '@src/types/response/TableListResponse';\n\nconst GET_TABLE_DATA_REQUEST = 'table/GET_TABLE_DATA_REQUEST';\nconst GET_TABLE_DATA_SUCCESS = 'table/GET_TABLE_DATA_SUCCESS';\nconst GET_TABLE_DATA_FAILURE = 'table/GET_TABLE_DATA_FAILURE';\n\nexport const getTableDataRequest = createAction(GET_TABLE_DATA_REQUEST);\nexport const getTableDataSuccess = createAction(GET_TABLE_DATA_SUCCESS);\nexport const getTableDataFailure = createAction(GET_TABLE_DATA_FAILURE);\n\nexport function* getTableData(action: Action<TableListPayload>) {\n    const response: Array<TableListResponse> = yield call(SampleService.SampleTableData, action.payload);\n    yield put(getTableDataSuccess(response));\n};\n\nexport function* watchTableDataActions() {\n    yield all([\n        takeEvery<string, any>(GET_TABLE_DATA_REQUEST, getTableData)\n    ])\n};\n\n// 초기 상태를 정의합니다\nconst InitialState = Record({\n    data: [],\n    loading: false,\n});\n\nexport interface TableStateType {\n    data: Array<TableListResponse>;\n    loading: boolean;\n}\n\nclass TableState extends InitialState implements TableStateType {\n}\n\nconst initialState = new TableState();\n\n// 리듀서\nconst tableList = handleActions<TableState, any>({\n    [GET_TABLE_DATA_REQUEST]: (state, action) => {\n        console.log('request');\n        return state.set('loading', true);\n    },\n    [GET_TABLE_DATA_SUCCESS]: (state, action) => {\n        console.log('success');\n        return state\n            .set('loading', false)\n            .set('data', action.payload);\n\n    },\n    [GET_TABLE_DATA_FAILURE]: (state, action) => {\n        console.error('통신에러');\n        return state.set('loading', false);\n    },\n}, initialState);\n\nexport default tableList;\n"]},"metadata":{},"sourceType":"module"}