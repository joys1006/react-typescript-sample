{"ast":null,"code":"var _jsxFileName = \"/Users/eomhocheol/Desktop/source/react-typescript-sample/react-typescript-sample/src/containers/Counter/CounterContainer.tsx\";\nimport React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport Counter from '../../components/Counter/Counter';\nimport * as counterActions from '@src/store/modules/counter/counter.module';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n;\n\nclass CounterContainer extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onIncrement = () => {\n      const {\n        CounterActions\n      } = this.props;\n      CounterActions.increment();\n    };\n\n    this.onDecrement = () => {\n      const {\n        CounterActions\n      } = this.props;\n      CounterActions.decrement();\n    };\n\n    this.setRandomColor = () => {\n      const color = [Math.floor(Math.random() * 55 + 200), Math.floor(Math.random() * 55 + 200), Math.floor(Math.random() * 55 + 200)];\n      this.props.CounterActions.setColor(color);\n    };\n  }\n\n  render() {\n    const {\n      onIncrement,\n      onDecrement,\n      setRandomColor\n    } = this;\n    const {\n      number,\n      color\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(Counter, {\n      number: number,\n      color: color,\n      onIncrement: onIncrement,\n      onDecrement: onDecrement,\n      onRandomizeColor: setRandomColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    number: state.counter.number,\n    color: state.counter.color\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    CounterActions: bindActionCreators(counterActions, dispatch)\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CounterContainer);","map":{"version":3,"sources":["/Users/eomhocheol/Desktop/source/react-typescript-sample/react-typescript-sample/src/containers/Counter/CounterContainer.tsx"],"names":["React","Component","bindActionCreators","connect","Counter","counterActions","CounterContainer","onIncrement","CounterActions","props","increment","onDecrement","decrement","setRandomColor","color","Math","floor","random","setColor","render","number","mapStateToProps","state","counter","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAoBC,kBAApB,QAAuD,OAAvD;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,OAAP,MAAoB,kCAApB;AAEA,OAAO,KAAKC,cAAZ,MAAgC,2CAAhC;;AAOC;;AAED,MAAMC,gBAAN,SAA+BL,SAA/B,CAAgD;AAAA;AAAA;;AAAA,SAC5CM,WAD4C,GAC9B,MAAM;AAChB,YAAM;AAAEC,QAAAA;AAAF,UAAqB,KAAKC,KAAhC;AACAD,MAAAA,cAAc,CAACE,SAAf;AACH,KAJ2C;;AAAA,SAK5CC,WAL4C,GAK9B,MAAM;AAChB,YAAM;AAAEH,QAAAA;AAAF,UAAqB,KAAKC,KAAhC;AACAD,MAAAA,cAAc,CAACI,SAAf;AACH,KAR2C;;AAAA,SAS5CC,cAT4C,GAS3B,MAAM;AACnB,YAAMC,KAAK,GAAG,CACVC,IAAI,CAACC,KAAL,CAAYD,IAAI,CAACE,MAAL,KAAc,EAAf,GAAqB,GAAhC,CADU,EAEVF,IAAI,CAACC,KAAL,CAAYD,IAAI,CAACE,MAAL,KAAc,EAAf,GAAqB,GAAhC,CAFU,EAGVF,IAAI,CAACC,KAAL,CAAYD,IAAI,CAACE,MAAL,KAAc,EAAf,GAAqB,GAAhC,CAHU,CAAd;AAKA,WAAKR,KAAL,CAAWD,cAAX,CAA0BU,QAA1B,CAAmCJ,KAAnC;AACH,KAhB2C;AAAA;;AAkB5CK,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEZ,MAAAA,WAAF;AAAeI,MAAAA,WAAf;AAA4BE,MAAAA;AAA5B,QAA+C,IAArD;AACA,UAAM;AAAEO,MAAAA,MAAF;AAAUN,MAAAA;AAAV,QAAoB,KAAKL,KAA/B;AAEA,wBACI,QAAC,OAAD;AACI,MAAA,MAAM,EAAEW,MADZ;AAEI,MAAA,KAAK,EAAEN,KAFX;AAGI,MAAA,WAAW,EAAEP,WAHjB;AAII,MAAA,WAAW,EAAEI,WAJjB;AAKI,MAAA,gBAAgB,EAAEE;AALtB;AAAA;AAAA;AAAA;AAAA,YADJ;AASH;;AA/B2C;;AAkChD,MAAMQ,eAAe,GAAIC,KAAD,IAAuB;AAC3C,SAAO;AACHF,IAAAA,MAAM,EAAEE,KAAK,CAACC,OAAN,CAAcH,MADnB;AAEHN,IAAAA,KAAK,EAAEQ,KAAK,CAACC,OAAN,CAAcT;AAFlB,GAAP;AAIH,CALD;;AAOA,MAAMU,kBAAkB,GAAIC,QAAD,IAAmC;AAC1D,SAAO;AACHjB,IAAAA,cAAc,EAAEN,kBAAkB,CAACG,cAAD,EAAiBoB,QAAjB;AAD/B,GAAP;AAGH,CAJD;;AAMA,eAAetB,OAAO,CAClBkB,eADkB,EAElBG,kBAFkB,CAAP,CAGblB,gBAHa,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { AnyAction, bindActionCreators, Dispatch} from 'redux';\nimport { connect } from 'react-redux';\nimport Counter from '../../components/Counter/Counter';\n\nimport * as counterActions from '@src/store/modules/counter/counter.module';\nimport { StoreState } from '@src/store/modules';\n\ninterface Props {\n    number: number;\n    color: Array<number>;\n    CounterActions: typeof counterActions;\n};\n\nclass CounterContainer extends Component<Props> {\n    onIncrement = () => {\n        const { CounterActions } = this.props;\n        CounterActions.increment();\n    };\n    onDecrement = () => {\n        const { CounterActions } = this.props;\n        CounterActions.decrement();\n    };\n    setRandomColor = () => {\n        const color = [\n            Math.floor((Math.random()*55) + 200),\n            Math.floor((Math.random()*55) + 200),\n            Math.floor((Math.random()*55) + 200)\n        ];\n        this.props.CounterActions.setColor(color);\n    };\n\n    render() {\n        const { onIncrement, onDecrement, setRandomColor } = this;\n        const { number, color } = this.props;\n\n        return (\n            <Counter\n                number={number}\n                color={color}\n                onIncrement={onIncrement}\n                onDecrement={onDecrement}\n                onRandomizeColor={setRandomColor}\n            />\n        );\n    }\n}\n\nconst mapStateToProps = (state: StoreState) => {\n    return {\n        number: state.counter.number,\n        color: state.counter.color\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) => {\n    return {\n        CounterActions: bindActionCreators(counterActions, dispatch)\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(CounterContainer);\n"]},"metadata":{},"sourceType":"module"}